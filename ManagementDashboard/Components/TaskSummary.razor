@using ManagementDashboard.Data.Models
@using ManagementDashboard.Core.Extensions
@inject ManagementDashboard.Core.Services.SettingsService SettingsService

@{
    var dueDateReminderThresholdDays = SettingsService.DueDateReminderThresholdDays;
}

<div class="card shadow-sm mb-3 task-summary-card" style="border: none;">
    <div class="card-header d-flex flex-wrap align-items-center justify-content-between bg-body-tertiary border-0">
        <div class="d-flex align-items-center gap-2 flex-wrap">
            <span class="fw-bold h5 mb-0">@Task.Title</span>
        </div>
        <div class="d-flex align-items-center gap-2">
            @GetTaskStatusBadge(Task)
            <!-- Action icons (stubbed, wire up as needed)
            <button class="btn btn-sm btn-outline-secondary" title="Edit"><i class="bi bi-pencil"></i></button>
            <button class="btn btn-sm btn-outline-danger" title="Delete"><i class="bi bi-trash"></i></button>
            <button class="btn btn-sm btn-outline-success" title="Complete"><i class="bi bi-check-lg"></i></button>
             -->
        </div>
    </div>
    <div class="card-body pb-2 pt-2 bg-body">
        <div class="d-flex flex-wrap gap-2">
            @if (Task.IsPastDue)
            {
                <span class="badge bg-danger"><i class="bi bi-exclamation-circle me-1"></i>Overdue</span>
                <span class="text-danger ms-2 small">
                    <i class="bi bi-calendar me-1"></i>
                    Due @Task.DueDateSummary
                </span>
            }
            else if (Task.IsDueDateReminder(dueDateReminderThresholdDays))
            {
                <span class="badge bg-info text-dark"><i class="bi bi-clock me-1"></i>Due Soon</span>
                <span class="text-info ms-2 small">
                    <i class="bi bi-calendar me-1"></i>
                    Due @Task.DueDateSummary
                </span>
            }
            @if (Task.IsBlocked && !string.IsNullOrWhiteSpace(Task.BlockerReason))
            {
                <span class="badge bg-warning text-dark ms-2"><i class="bi bi-slash-circle me-1"></i>Blocked: <span class="fw-semibold">@Task.BlockerReason</span></span>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(Task.Description))
        {
            <div class="text-muted small mb-2">@Task.Description</div>
        }
        <div class="d-flex align-items-center mb-2">
            <span class="fw-semibold text-truncate" style="max-width: 60%">
                <i class="bi bi-lightning-charge me-1"></i> Events & State
            </span>
            <button class="btn btn-sm btn-link ms-2" @onclick="ToggleDetails" aria-label="Show Events & State Details">
                <i class="bi @(ShowDetails ? "bi-chevron-up" : "bi-chevron-down")"></i>
            </button>
        </div>
        @if (ShowDetails)
        {
            <div class="mt-2">
                @if (Events.Any())
                {
                    <div class="mb-2">
                        <strong>Events:</strong>
                        <ul class="list-unstyled mb-0">
                            @foreach (var evt in Events)
                            {
                                <li class="text-info small"><i class="bi bi-lightning-charge me-1"></i>@evt</li>
                            }
                        </ul>
                    </div>
                }
                @if (State.Any())
                {
                    <div>
                        <strong>State:</strong>
                        <ul class="list-unstyled mb-0">
                            @foreach (var s in State)
                            {
                                <li class="text-secondary small"><i class="bi bi-info-circle me-1"></i>@s</li>
                            }
                        </ul>
                    </div>
                }
                @if (!Events.Any() && !State.Any())
                {
                    <span class="text-muted small">No events or state details.</span>
                }
            </div>
        }
    </div>
</div>
